import dataclasses
import pytest
import bs4
import aiofiles
import pandas
import typing as tp
from app import process_user


async def gen_for_users():
    async with aiofiles.open('Users_A.html') as f:
        text = await f.read()
    parsed_html = bs4.BeautifulSoup(markup=text, features="lxml")
    rows = parsed_html.findAll('div', attrs={'class': 'tile'})
    for row in rows:
        yield row


@dataclasses.dataclass
class Case:
    data: list[tuple[tp.Any, ...]]
    path_to_file: str


USER_INFO = [
    (1891, 'Абабков', 'Валентин', 'Анатольевич', 'профессор', 'Кафедра медицинской психологии и психофизиологии'),
    (2168826, 'Абакаров', 'Абдулла', 'Мурадович', 'преподаватель', 'ДГПХ'),
    (4719, 'Абакумов', 'Евгений', 'Васильевич', 'профессор', 'Кафедра прикладной экологии'),
    (3048, 'Абалян', 'Анна', 'Игоревна', 'доцент', 'Кафедра этнополитологии'),
    (5464, 'Аббасов', 'Меджид', 'Эльхан оглы', 'профессор',
     'Кафедра математической теории моделирования систем управления'),
    (1892, 'Абгаджава', 'Даур', 'Арнольдович', 'доцент', 'Кафедра конфликтологии'),
    (2166097, 'Абдреева', 'Алла', 'Юрьевна', 'преподаватель', 'ДГПХ'),
    (76391, 'Абдулина', 'Бэлла', 'Марсельевна', 'лаборантисследователь',
     'Институт истории Санкт-Петербургского государственного университета'),
    (4306, 'Абдулкадырова', 'Зарина', 'Кудратовна', 'ассистент', 'Кафедра акушерства, гинекологии и репродуктологии'),
    (2166655, 'Абдуллаев', 'Александр', 'Максимович', 'преподаватель', 'ДГПХ'),
    (37058, 'Абдуллаев', 'Ясын', 'Сахиб оглы', 'преподаватель', 'ДГПХ'),
    (3288, 'Абдульманова', 'Аделя', 'Хамитовна', 'доцент', 'Кафедра английской филологии и перевода'),
    (19449, 'Абдурахманов', 'Абдурахман', 'Ибрагимхалилович', 'преподаватель', 'ДГПХ'),
    (10781, 'Абдушелишвили', 'Георгий', 'Леванович', 'преподаватель', 'ДГПХ'),
    (11763, 'Абрамов', 'Максим', 'Викторович', 'доцент', 'Кафедра информатики'),
    (10990, 'Абрамов', 'Нафтали', 'Нахшунович', 'старший преподаватель', 'Кафедра изобразительного искусства'),
    (2166666, 'Абрамова', 'Дарья', 'Игоревна', 'методист преподаватель', 'Центр языкового тестирования ДГПХ')
    ]

FIELD_INFO = [
    (13858, 'Технологии программирования', 2022),
    (12979, 'Технологии программирования', 2021),
    (12085, 'Технологии программирования', 2020),
    (13895, 'Программная инженерия', 2022),
    (12889, 'Программная инженерия', 2021),
    (11929, 'Программная инженерия', 2020),
    (11096, 'Программная инженерия', 2019),
    (9989, 'Программная инженерия', 2018),
    (11295, 'Математическое обеспечение и администрирование информационных систем', 2019),
    (9988, 'Математическое обеспечение и администрирование информационных систем', 2018),
    (12847, 'Прикладная математика и информатика', 2021),
    (11888, 'Прикладная математика и информатика', 2020),
    (11094, 'Прикладная математика и информатика', 2019),
    (10017, 'Прикладная математика и информатика', 2018),
    ]

GROUP_INFO = [
    (334044, '22.Б10-мм', 'очная', 13858),
    (334037, '22.Б09-мм', 'очная', 13858),
    (334407, '22.Б08-мм', 'очная', 13858),
    (334472, '22.Б07-мм', 'очная', 13858),
    (334758, '21.Б10-мм', 'очная', 12979),
    (334760, '21.Б09-мм', 'очная', 12979),
    (334733, '21.Б08-мм', 'очная', 12979),
    (334738, '21.Б07-мм', 'очная', 12979),
    (334462, '22.Б11-мм', 'очная', 13895),
    (334091, '22.Б15-мм', 'очная', 13895),
    ]


TEST_CASES = [
    Case(data=FIELD_INFO, path_to_file="Field.csv"),
    Case(data=USER_INFO, path_to_file="User.csv"),
    Case(data=GROUP_INFO, path_to_file="Group.csv")
]


@pytest.mark.parametrize("user_values", USER_INFO)
async def test_get_user_info_by_bs4_element(user_values: tuple) -> None:
    number_of_elem = len(USER_INFO)
    counter = 0
    list_of_users = []

    async for row in gen_for_users():
        list_of_users.append(row)
        counter += 1
        if counter == number_of_elem:
            break

    list_of_users_info = [process_user(x) for x in list_of_users]

    assert USER_INFO == list_of_users_info


@pytest.mark.parametrize('test', TEST_CASES)
async def test_get_user_info_in_csv(test: Case) -> None:
    frame = pandas.read_csv(test.path_to_file)
    ids_list = [info[0] for info in test.data]
    rows = frame.loc[frame['id'].isin(ids_list)]
    assert set(test.data) == set((rows.itertuples(index=False, name=None)))
